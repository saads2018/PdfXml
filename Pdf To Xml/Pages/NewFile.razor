@page "/newfile"
@using BlazorApp1
@using Pdf_To_Xml.Data
@inject ApplicationDbContext dbContext
@using BlazorInputFile;
@using Pdf_To_Xml.Models
@using System.Xml
@using System.Resources
@using System.Reflection
@using iTextSharp.text.pdf
@using iTextSharp.text.pdf.parser
@using org.pdfclown.documents.contents
@inject IJSRuntime jsRunTime;
@inject AuthenticationStateProvider authenticate;

<PageTitle>Home</PageTitle>

<AuthorizeView>
	<Authorized>
		<h1>File</h1>

		<div>
			<input type="checkbox" @onclick="@(e=>showOnHomePage())" id="pdfShow" name="pdfShow" />
			<label onclick="changeCheck('pdfShow',2)">Show Files On HomePage</label>
		</div>

		<br />
		<label>Only PDF File (Max - 2MB)</label>

		<div class="form-floating mt-3">
			<BlazorInputFile.InputFile value="@fileValue"  accept="application/pdf"  OnChange="@(e=>HandleFile(e))" />
			<button @onclick="@(e=>Upload())">Upload</button>
		</div>
		<span class="@colorScheme">@warning</span>
		<div class="form-floating">
			<a href="" id="pdfFile" class="mt-5" @onclick="@(e=>Download())">@fileName</a>
		</div>

		<div style="@hide" class="mt-2">
		<label class="mt-3">You can add two addtional files of max 2MB each!</label>
		<div class="form-floating mt-1">
			<BlazorInputFile.InputFile value="@fileValue1"  OnChange="@(e=>HandleAdditionalFile(e))" />
			<button @onclick="@(e=>AdditionalUpload())">Additional Upload</button>
		</div>
			<span class="@colorScheme1">@warning1</span>
			<br />
			<div class="form-floating">
				<a href="" id="addFile1" class="mt-5" @onclick="@(e=>Download("1"))">@fileName1</a>
			</div>
			<div class="form-floating">
				<a href="" id="addFile2" class="mt-5" @onclick="@(e=>Download("2"))">@fileName2</a>
			</div>

			<br/>
			<div>
			<input type="checkbox" onclick="@checkFirstPgDefault" id="pgDefault"  name="pgDefault" checked/>
			<label onclick="changeCheck('pgDefault',2)">Place the first page under the type default</label>
			</div>
			<span style="@hidePgCheck" class="text-warning">You Need To Press Extract To See The Changes!</span>

			<button class="btn btn-primary mt-3" onclick="@ExtractXML">Extract</button>
			<div class="spinner" style="@loader"></div>
		</div>

		<div style="@hideTable">
			<table class="table table-bordered table-responsive mt-2">
				@foreach(var name in namesList)
				{
					<tr>
						<td>@name.Key</td>
						<td>
							<input @onclick="@(e=>checkName(name.Key))" type="checkbox" value="@name.Key" id="@name.Key" checked name="extractedName" />
						</td>
						<td>
							<select id="mySelect @namesList.IndexOf(name)" value="@selectedNames.Where(x=>x.Text==name.Key).FirstOrDefault().Type" @onchange="@(e=>selectType(namesList.IndexOf(name),e.Value.ToString()))" >
								@foreach (var type in typesList)
								{
									<option value="@type">@type</option>
								}
							</select>
						</td>
					</tr>
				}
			</table>

			<button class="btn btn-primary mt-3" onclick="@Proceed">Proceed</button>
			<button class="btn btn-primary mt-3" onclick="@Save">Save</button>

			<div style="@hideSend" class="form-floating mt-3">
				<button class="btn btn-primary mt-3" onclick="@SendXML">Send</button>
				<input class="mt-1" type="number" id="sendText" @bind="sendValue"/>
			</div>
		</div>
		
	</Authorized>
</AuthorizeView>



@code{
	public bool DISCARD_BRACKETS = false;

	public string loader;
	public int firstPageDefault;
	public string hideSend;
	public List<string> exemptNames;
	public ApplicationDbContext context1;
	public int sendValue;	
	public List<WordDoc> xmlList;	
	public string warning;
	public string warning1;
	public string hide;
	public string hidePgCheck;
	public int indexRecord;
	public string hideTable;
	public string colorScheme;
	public string colorScheme1;
	public string fileValue;
	public string fileName;
	public string fileValue1;
	public string fileName1;
	public string fileName2;
	public string Input;
	public IFileListEntry[] globalFiles;
	public IFileListEntry[] globalAddFiles;
	public List<IGrouping<string,WordDoc>>? namesList;
	public List<string> typesList;
	public List<WordDoc> selectedNames;
	public List<WordDoc> wordDocs;
	public List<WordDoc> wordDocsTemp1;


	protected override Task OnInitializedAsync()
	{
		context1 = dbContext;
		context1.Database.EnsureCreated();
		var context = context1.PdfTable.ToList();
		var user = authenticate.GetAuthenticationStateAsync();
		var name = user.Result.User.Identity.Name;
		namesList = new List<IGrouping<string,WordDoc>>();
		typesList = new List<string>();
		selectedNames = new List<WordDoc>();
		wordDocs = new List<WordDoc>();
		wordDocsTemp1 = new List<WordDoc>();
		firstPageDefault = 1;
		exemptNames = new List<string>();
		indexRecord=-1;

		ResourceManager resourceManager = new ResourceManager("Pdf_To_Xml.Resources.Types", Assembly.GetExecutingAssembly());
		ResourceSet resourceSet = resourceManager.GetResourceSet(System.Globalization.CultureInfo.CurrentCulture, true, true);

		foreach(System.Collections.DictionaryEntry resource in resourceSet)
		{
			typesList.Add(resource.Value.ToString());
		}

		if (String.IsNullOrWhiteSpace(name))
			name = "publicUser";

		DownloadRunning = false;
		loader = "display:none";
		warning = "";
		hide = "display:none";
		hidePgCheck = "display:none";
		hideTable = "display:none";
		hideSend = "display:none";
		fileName = "";
		fileName1 = "";
		fileName2 = "";


		if (name != null)
		{

			var extraUserInfoRecord = context1.ExtraUserInfo.ToList().Where(x => x.UserName == name).FirstOrDefault();

			if (extraUserInfoRecord == null)
			{
				ExtraUserInfo extraUserInfo = new ExtraUserInfo();
				extraUserInfo.UserName = name;
				context1.ExtraUserInfo.Add(extraUserInfo);
				context1.SaveChanges();
			}

			var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).ToList();
			if (pdfRecord.FirstOrDefault() != null)
			{
				try
				{
					warning = "File Uploaded Successfully!";
					colorScheme = "text-warning";
					hide = "display:block";
					fileName = pdfRecord.LastOrDefault().UserName.Substring(pdfRecord.LastOrDefault().UserName.IndexOf(":") + 1);
					indexRecord = context1.PdfTable.ToList().IndexOf(pdfRecord.LastOrDefault());

					if (!String.IsNullOrWhiteSpace(pdfRecord.LastOrDefault().savedTypes))
					{
						if (pdfRecord.LastOrDefault().FirstPgDf == 0)
						{
							firstPageDefault = 0;
						}

						getNameList(pdfRecord.LastOrDefault());
						List<string> getTypes = new List<string>();

						if (pdfRecord.LastOrDefault().savedTypes.Contains(":"))
						{
							getTypes = pdfRecord.LastOrDefault().savedTypes.Substring(0, pdfRecord.LastOrDefault().savedTypes.IndexOf(":")).Split(',').ToList();
							exemptNames = pdfRecord.LastOrDefault().savedTypes.Substring(pdfRecord.LastOrDefault().savedTypes.IndexOf(":") + 1).Split('=').ToList();
						}
						else
							getTypes = pdfRecord.LastOrDefault().savedTypes.Split(',').ToList();

						for (int i = 0; i < selectedNames.Count; i++)
						{
							selectedNames[i].Type = getTypes[i];
						}
						hideTable = "display:block";

					}
				}
				catch
				{

				}

				try
				{
					if (pdfRecord.LastOrDefault().AddFile1 != null)
					{
						fileName1 = pdfRecord.LastOrDefault().FileNames.Substring(0, pdfRecord.LastOrDefault().FileNames.IndexOf(":"));
						warning1 = "One File Uploaded Successfully!";
						colorScheme1 = "text-warning";
					}
					if (pdfRecord.LastOrDefault().AddFile2 != null)
					{
						fileName2 = pdfRecord.LastOrDefault().FileNames.Substring(pdfRecord.LastOrDefault().FileNames.IndexOf(":") + 1);
						warning1 = "Two Files Uploaded Successfully!";
					}
				}
				catch
				{

				}
			}
		}

		return base.OnInitializedAsync();
	}


	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		var user = authenticate.GetAuthenticationStateAsync();
		var name = user.Result.User.Identity.Name;

		foreach(var name1 in exemptNames)
			jsRunTime.InvokeVoidAsync("changeCheck", name1,0);

		if(firstPageDefault==0)
			jsRunTime.InvokeVoidAsync("changeCheck", "pgDefault",0);

		try
		{
			jsRunTime.InvokeVoidAsync("changeCheck", "pdfShow", context1.ExtraUserInfo.ToList().Where(x=>x.UserName==name).FirstOrDefault().ShowFiles);
		}
		catch
		{

		}

		return base.OnAfterRenderAsync(firstRender);
	}

	public async Task checkFirstPgDefault()
	{
		firstPageDefault = firstPageDefault == 0 ? 1 : 0;

		int chosenIndex = wordDocs.IndexOf(wordDocs.Where(x => x.Alignment == -130392192).FirstOrDefault());

		if(wordDocs.Count>0 && hideTable == "display:block")
		{
			if (chosenIndex == -1 && firstPageDefault == 1)
				hidePgCheck = "display:block";
			else if (chosenIndex != -1 && firstPageDefault == 0)
				hidePgCheck = "display:block";
			else
				hidePgCheck = "display:none";
		}
	}

	public async Task showOnHomePage()
	{
		var user = authenticate.GetAuthenticationStateAsync();
		var name = user.Result.User.Identity.Name;
		string show = context1.ExtraUserInfo.ToList().Where(x=>x.UserName==name).FirstOrDefault().ShowFiles;

		context1.ExtraUserInfo.ToList().Where(x=>x.UserName==name).FirstOrDefault().ShowFiles = show=="0"? "1":"0";
		context1.SaveChanges();
	}

	public void selectType(int index, string value)
	{
		try
		{
			selectedNames[index].Type = value; 
		}
		catch
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured!");
		}
	}

	private async Task checkName(string name)
	{
		if(exemptNames.Any(x=>x==name))
		{
			exemptNames.Remove(name);
		}
		else
		{
			exemptNames.Add(name);
		}
	}

	private void SendXML()
	{

		try
		{
			if (sendValue <= 0)
			{
				return;
			}
			else if( sendValue > xmlList.Count)
			{
				jsRunTime.InvokeVoidAsync("alert", "The Number Exceeds The Range!");
				return;
			}
			XmlWriterSettings settings = new XmlWriterSettings();
			settings.Indent = true;
			using (StringWriter ms = new StringWriter())
			{
				using (XmlWriter writer = XmlWriter.Create(ms, settings))
				{
					// Start the document
					writer.WriteStartDocument();
					writer.WriteStartElement("file");

					for (int i = 0; i < sendValue; i++)
					{
						writer.WriteStartElement("person");
						writer.WriteAttributeString("type", xmlList[i].Type);
						writer.WriteStartElement("other");
						writer.WriteAttributeString("rate", "0%");
						writer.WriteString(xmlList[i].Text);
						writer.WriteEndElement();
						writer.WriteEndElement();
					}




					writer.WriteEndElement();
					// End the document
					writer.WriteEndDocument();
				}
				string checkInDebuggerResult = ms.ToString();
			}
		}
		catch
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured!");
			return;
		}

	}




	private async Task showLoad()
	{
		loader = "display:block";
		hideTable = "display:none";
	}

	private void getNameList(PdfTable pdfRecord)
	{
		try
		{
			PdfReader reader = new PdfReader(pdfRecord.Pdf);
			List<string> lines = new List<string>();

			BasicTextExtraction basicTextExtraction = new BasicTextExtraction();
			wordDocs = basicTextExtraction.Advanced(pdfRecord,firstPageDefault,DISCARD_BRACKETS);

			wordDocsTemp1 = new List<WordDoc>();
			var grouped1 = wordDocs.GroupBy(i => i.Alignment).Where(x => x.Key.Value < 130 || x.Key.Value > 360).OrderByDescending(z => z.Count()).ToList();
			var minGroup = grouped1[0].Key.Value;

			int chosenIndex = wordDocs.IndexOf(wordDocs.Where(x => x.Alignment == -130392192).FirstOrDefault());				
			int index = 0;

			if(firstPageDefault==1)
				index=chosenIndex+1;

			for (int z = index; z < wordDocs.Count; z++)
			{
				var word = wordDocs[z];
				string spaces = word.Text.Trim().Where(u => char.IsWhiteSpace(u)).FirstOrDefault().ToString();
				word.Text = word.Text.Trim();


				if ((z + 1) != wordDocs.Count && !String.IsNullOrWhiteSpace(word.Text) && !grouped1.Any(x=>x.Key.Value==word.Alignment) && (word.Text.Trim().Contains(word.Text.Trim().ToUpper())) && char.IsLetterOrDigit(word.Text[0]) && !String.IsNullOrWhiteSpace(wordDocs[z + 1].Text) && wordDocs[z + 1].Alignment != minGroup)
				{
					WordDoc doc = new WordDoc();
					doc.Type = "";
					doc.Alignment = word.Alignment;
					doc.Text = word.Text.Trim();
					wordDocsTemp1.Add(doc);

					int tempAlign = (int)wordDocs[z + 1].Alignment;
					do
					{
						z += 1;
					} while (z < wordDocs.Count && wordDocs[z].Alignment == tempAlign);

					z -= 1;
				}
			}

			var defaultName=new WordDoc();
			defaultName.Text="Default";
			defaultName.Alignment = 0;


			ResourceManager resourceManager = new ResourceManager("Pdf_To_Xml.Resources.DiscardTransitions", Assembly.GetExecutingAssembly());
			ResourceSet resourceSet = resourceManager.GetResourceSet(System.Globalization.CultureInfo.CurrentCulture, true, true);

			foreach (System.Collections.DictionaryEntry resource in resourceSet)
			{
				wordDocsTemp1.RemoveAll(x=> x.Text.Contains(resource.Value.ToString()));
			}

			wordDocsTemp1.Insert(0, defaultName);
			namesList = wordDocsTemp1.GroupBy(x => x.Text).ToList();
			wordDocsTemp1.RemoveAt(0);

			jsRunTime.InvokeVoidAsync("resetSelectList", namesList.Count, typesList.Count == 0 ? "" : typesList[0]);
			foreach (var name in namesList)
			{
				var type = new WordDoc();
				type.Text = name.Key;
				type.Type = "";
				selectedNames.Add(type);
			}
		}
		catch (Exception ex)
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Either The Format Is Incorrect OR The Pdf File Might Be Invalid For Extraction!");
			return;
		}
	}

	private async Task ExtractXML()
	{
		try
		{
			hidePgCheck = "display:none";
			selectedNames = new List<WordDoc>();
			namesList = new List<IGrouping<string,WordDoc>>();
			await Task.Run(showLoad);
			await Task.Delay(2000);
			var user = authenticate.GetAuthenticationStateAsync();
			var userName = user.Result.User.Identity.Name;

			if (String.IsNullOrWhiteSpace(userName))
				userName = "publicUser";

			var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == userName).LastOrDefault();
			indexRecord = context1.PdfTable.ToList().IndexOf(pdfRecord);

			getNameList(pdfRecord);

			hideTable = "display:block";
			loader = "display:none";



			// Create the XML writer
		}
		catch(Exception ex)
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Either The Format Is Incorrect OR The Pdf File Might Be Invalid For Extraction!");
			loader = "display:none";
			return;
		}
	}

	int SaveCond = 0;
	public async Task Save()	
	{
		try
		{
			List<string?> types = new List<string?>();
			int chosenIndex = wordDocs.IndexOf(wordDocs.Where(x => x.Alignment == -130392192).FirstOrDefault());

			if(chosenIndex==-1)
			{
				context1.PdfTable.ToList()[indexRecord].FirstPgDf = 0;
			}
			else
			{
				context1.PdfTable.ToList()[indexRecord].FirstPgDf = 1;
			}

			foreach (var name in selectedNames)
			{
				types.Add(name.Type);
			}
			context1.PdfTable.ToList()[indexRecord].savedTypes = String.Join(",", types);
			if(exemptNames.Count>0)
				context1.PdfTable.ToList()[indexRecord].savedTypes += ":" + String.Join('=', exemptNames);
			context1.SaveChanges();
			if(SaveCond==0)
				jsRunTime.InvokeVoidAsync("getAlert", "The Selected Types And Names Have Been Saved!");
			else
				jsRunTime.InvokeVoidAsync("getAlert", "The File Has Been Successfully Created!");
		}
		catch(Exception ex)
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Either The Format Is Incorrect OR The Pdf File Might Be Invalid For Extraction!");
			return;
		}
	}

	public async Task Proceed()
	{
		if (selectedNames.Any(x => x.Type == "" && !exemptNames.Any(y=>y.Trim()==x.Text.Trim())))
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Kindly, choose a type for every single selected name!");
		}
		else
		{
			try
			{
				List<WordDoc> XmlList = new List<WordDoc>();

				int state = 0;

				int i = 0;

				int chosenIndex = wordDocs.IndexOf(wordDocs.Where(x => x.Alignment == -130392192).FirstOrDefault());

				while (i < wordDocs.Count)
				{
					if (i == chosenIndex)
						i += 1;

					WordDoc wordDoc = wordDocs[i];

					if ( (chosenIndex!=-1 && firstPageDefault==1 && i < chosenIndex) || !wordDocsTemp1.Any(u => u.Alignment == wordDoc.Alignment))
					{
						wordDoc.Text = " " + wordDoc.Text.Trim();

						if (state == 0 && !exemptNames.Any(x=>x=="Default"))
						{
							var extractedName = selectedNames.Where(x => x.Text.Trim()=="Default").FirstOrDefault();

							WordDoc word = new WordDoc();
							if (extractedName == null)
								word.Type = "unknown";
							else
								word.Type = extractedName.Type.ToLower();

							word.Text = wordDoc.Text;
							XmlList.Add(word);
							state = 1;
						}
						else if (state == 1)
						{
							XmlList[XmlList.Count - 1].Text += " " + wordDoc.Text.Trim();
						}
						i += 1;
					}
					else if (wordDocsTemp1.Any(u => u.Alignment == wordDoc.Alignment))
					{
						string bracketList = "";
						WordDoc word = new WordDoc();
						var v = wordDoc.Text.ToLower();

						var extractedName = selectedNames.Where(x => v.Contains(x.Text.ToLower().Trim())).FirstOrDefault();

						if (extractedName == null)
							word.Type = "unknown";
						else
							word.Type = extractedName.Type.ToLower();

						word.Text = "";

						XmlList.Add(word);

						try
						{
							if (wordDocs[i+1].Text.Contains('('))
							{
								i += 1;
								var bracketText = wordDocs[i].Text.TrimEnd();
								while (!wordDocs[i].Text.Contains(')'))
								{
									i += 1;
									bracketText += " " + wordDocs[i].Text.TrimStart();
								}

								if(!DISCARD_BRACKETS)
								{
									bracketList+=bracketText.Substring(bracketText.IndexOf("("), bracketText.IndexOf(")") - bracketText.IndexOf("(") + 1) + " ";
									bracketText = bracketText.Replace(bracketText.Substring(bracketText.IndexOf("("), bracketText.IndexOf(")") - bracketText.IndexOf("(") + 1),"");
								}
								XmlList[XmlList.Count - 1].Text += bracketText;
							}
						}
						catch
						{

						}

						var firstAlign = (i+1) < wordDocs.Count ? wordDocs[i+1].Alignment : 0;

						do
						{
							try
							{
								i += 1;
								if(!(i<wordDocs.Count))
								{
									break;
								}
								else if (wordDocs[i].Text.Contains('('))
								{
									var tempBracketText = wordDocs[i].Text.TrimEnd();
									while (!wordDocs[i].Text.Contains(')'))
									{
										i += 1;
										tempBracketText += " " + wordDocs[i].Text.TrimStart();
									}

									if(!DISCARD_BRACKETS)
									{
										bracketList += tempBracketText.Substring(tempBracketText.IndexOf("("), tempBracketText.IndexOf(")") - tempBracketText.IndexOf("(") + 1)+" ";
										tempBracketText = tempBracketText.Replace(tempBracketText.Substring(tempBracketText.IndexOf("("), tempBracketText.IndexOf(")") - tempBracketText.IndexOf("(") + 1), "");
									}

									XmlList[XmlList.Count - 1].Text += XmlList[XmlList.Count - 1].Text == "" ? tempBracketText : " " + tempBracketText;
									wordDocs[i].Alignment = firstAlign;
								}
								else if(wordDocs[i].Alignment==firstAlign)
								{
									XmlList[XmlList.Count - 1].Text += XmlList[XmlList.Count - 1].Text == "" ? wordDocs[i].Text : " " + wordDocs[i].Text;
								}
							}
							catch
							{

							}
						}while (i < wordDocs.Count && wordDocs[i].Alignment == firstAlign) ;
						state = 0;


						var nameDefault = selectedNames.Where(x => x.Text.Trim() == "Default").FirstOrDefault();
						if (exemptNames.Any(x => x.Trim() == wordDoc.Text.Trim()))
						{
							if (exemptNames.Any(x => x == "Default"))
							{
								XmlList.RemoveAt(XmlList.Count - 1);
							}
							else
							{
								XmlList[XmlList.Count - 1].Type = nameDefault.Type.ToLower().Trim();

								var text = XmlList[XmlList.Count - 1].Text;
								XmlList[XmlList.Count - 1].Text = wordDoc.Text.Trim() + " " + text;
							}
						}

						if(!DISCARD_BRACKETS)
						{
							WordDoc wordDocBracket = new WordDoc();
							wordDocBracket.Text = bracketList.TrimEnd();
							wordDocBracket.Type = nameDefault.Type.ToLower().Trim();
							XmlList.Add(wordDocBracket);
						}

					}

				}


				xmlList = XmlList;
				string name = fileName.Contains(".pdf") ? fileName.Replace(".pdf", ".xml") : fileName + ".xml";

				XmlWriterSettings settings = new XmlWriterSettings();
				settings.Indent = true;



				using (MemoryStream ms = new MemoryStream())
				{
					using (XmlWriter writer = XmlWriter.Create(ms, settings))
					{
						// Start the document
						writer.WriteStartDocument();
						writer.WriteStartElement("file");

						foreach (var xmlItem in XmlList)
						{
							writer.WriteStartElement("person");
							writer.WriteAttributeString("type", xmlItem.Type);
							writer.WriteStartElement("other");
							writer.WriteAttributeString("rate", "0%");
							writer.WriteString(xmlItem.Text);
							writer.WriteEndElement();
							writer.WriteEndElement();
						}




						writer.WriteEndElement();
						// End the document
						writer.WriteEndDocument();
					}
					context1.PdfTable.ToList()[indexRecord].Xml = ms.ToArray();
					context1.SaveChanges();
					string xmlData = Convert.ToBase64String(ms.ToArray());
					await jsRunTime.InvokeVoidAsync("saveAsFile", name, xmlData, "/newfile");
					SaveCond = 1;
					Save();
					SaveCond = 0;
				}

				hideSend = "display:block";
			}
			catch(Exception ex)
			{
				jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Either The Format Is Incorrect OR The Pdf File Might Be Invalid For Extraction!");
				return;
			}
		}
	}



	private void HandleFile(IFileListEntry[] files)
	{
		try
		{
			warning1 = "";
			colorScheme1 = "";
			globalAddFiles = null;
			fileName1 = "";
			fileValue1 = "";

			if (files.FirstOrDefault().Size > 2000000)
			{
				warning = "File Size Exceeds 2MB, Kindly Choose Another File!";
				colorScheme = "text-danger";
				fileValue = "";
				hide = "display:none";
				fileName = "";
				hideTable = "display:none";
			}
			else
			{
				warning = "File Chosen Successfully!";
				colorScheme = "text-success";
				globalFiles = files;
				hide = "display:none";
				fileName = "";
				hideTable = "display:none";
			}
		}
		catch
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Please Try Again!");
			return;
		}		
	}

	private void HandleAdditionalFile(IFileListEntry[] files)
	{
		try
		{
			var user = authenticate.GetAuthenticationStateAsync();
			var name = user.Result.User.Identity.Name;

			if (context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).LastOrDefault().AddFile1 != null && context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).LastOrDefault().AddFile2 != null)
			{
				warning1 = "You Can't Upload More Than Two Files!";
				colorScheme1 = "text-danger";
			}
			else if (files.FirstOrDefault().Size > 2000000)
			{
				warning1 = "File Size Exceeds 2MB, Kindly Choose Another File!";
				colorScheme1 = "text-danger";
			}
			else
			{
				warning1 = "File Chosen Successfully!";
				colorScheme1 = "text-success";
				globalAddFiles = files;
			}
		}
		catch(Exception ex)
		{
			jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Please Try Again!");
			return;
		}
	}

	private async void Conversion(Byte[] pdf)
	{
		string convStr = System.Text.Encoding.Default.GetString(pdf);
	}


	private async void Upload()
	{
		try
		{
			if (warning == "File Chosen Successfully!" && globalFiles != null)
			{
				byte[] pdf = new byte[globalFiles.FirstOrDefault().Size];
				fileValue = "";
				fileName1="";
				fileName2 = "";
				fileName = globalFiles.FirstOrDefault().Name;
				warning = "File Uploaded Successfully!";
				exemptNames = new List<string>();
				colorScheme = "text-warning";
				jsRunTime.InvokeVoidAsync("changeCheck", "pgDefault", 1);
				firstPageDefault = 1;
				hide = "display:block";
				hidePgCheck = "display:none";

				try
				{
					pdf = await FileSender(globalFiles.FirstOrDefault());
				}
				catch
				{

				}	
				finally
				{
					Conversion(pdf);
					var user = authenticate.GetAuthenticationStateAsync();
					var name = user.Result.User.Identity.Name;

					PdfTable storePdf = new PdfTable();
					storePdf.UserName = name + ":" + globalFiles.FirstOrDefault().Name;
					storePdf.Pdf = pdf;
					context1.PdfTable.Add(storePdf);
					context1.SaveChanges();

					var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).ToList();
					indexRecord = context1.PdfTable.ToList().IndexOf(pdfRecord.LastOrDefault());
				}
			}
		}
		catch
		{
			await jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Please Try Again!");
			return;
		}

	}

	private async void AdditionalUpload()
	{
		try
		{
			if (warning1 == "File Chosen Successfully!" && globalAddFiles != null)
			{
				byte[] pdf = new byte[globalAddFiles.FirstOrDefault().Size];
				colorScheme1 = "text-warning";
				var user = authenticate.GetAuthenticationStateAsync();
				var name = user.Result.User.Identity.Name;
				
				try
				{
					if (context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().AddFile1 == null)
					{
						fileName1 = globalAddFiles.FirstOrDefault().Name;
						warning1 = "One File Uploaded Successfully!";
					}
					else
					{
						fileName2 = globalAddFiles.FirstOrDefault().Name;
						warning1 = "Two Files Uploaded Successfully!";
					}

					pdf = await FileSender(globalAddFiles.FirstOrDefault());
				}
				catch
				{

				}
				finally
				{
					Conversion(pdf);

					if (context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().AddFile1==null)
					{
						context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().AddFile1 = pdf;
						context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().FileNames = globalAddFiles.FirstOrDefault().Name+":";
					}
					else
					{
						context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().AddFile2 = pdf;
						context1.PdfTable.ToList().Where(x => x.UserName == name + ":" + fileName).LastOrDefault().FileNames += globalAddFiles.FirstOrDefault().Name;
					}
					context1.SaveChanges();
				}
			}
		}
		catch
		{
			await jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Please Try Again!");
			return;
		}

	}

	public async Task<byte[]> FileSender(IFileListEntry fileListEntry)
	{
		using (var ms=new MemoryStream())
		{
			await fileListEntry.Data.CopyToAsync(ms);
			return ms.ToArray();
		}
	}

	private bool DownloadRunning;
	private async Task Download(string cond="0",PdfTable pdf=null)
	{
		if(DownloadRunning)
			return;

		DownloadRunning = true;
		try
		{
			var user = authenticate.GetAuthenticationStateAsync();
			var name = user.Result.User.Identity.Name;

			if(cond=="0")
			{
				var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).LastOrDefault();
				await jsRunTime.InvokeVoidAsync("saveAsFile", pdfRecord.UserName.Substring(pdfRecord.UserName.IndexOf(":") + 1), Convert.ToBase64String(pdfRecord.Pdf), "/newfile");
				DownloadRunning = false;
			}
			else if(cond=="1")
			{
				var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).LastOrDefault();
				await jsRunTime.InvokeVoidAsync("saveAsFile", pdfRecord.FileNames.Substring(0,pdfRecord.FileNames.IndexOf(":")), Convert.ToBase64String(pdfRecord.AddFile1), "/newfile");
				DownloadRunning = false;
			}
			else if (cond == "2")
			{
				var pdfRecord = context1.PdfTable.ToList().Where(x => x.UserName.Substring(0, x.UserName.IndexOf(":")) == name).LastOrDefault();
				await jsRunTime.InvokeVoidAsync("saveAsFile", pdfRecord.FileNames.Substring(pdfRecord.FileNames.IndexOf(":")+1), Convert.ToBase64String(pdfRecord.AddFile2), "/newfile");
				DownloadRunning = false;
			}
		}
		catch
		{
			await jsRunTime.InvokeVoidAsync("getAlert", "Sorry An Error Occured, Please Try Again Or Reload The Page!");
			return;
		}
		finally
		{
			DownloadRunning = false;
		}
		
	}

	

}

